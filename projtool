#!/usr/bin/env bash
# projtool - unified project management helper (full update)
set -euo pipefail

PROJECTS_DIR="${PROJECTS_DIR:-$HOME/Projects}"
mkdir -pv "$PROJECTS_DIR"

# Colors
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
RESET="\033[0m"

declare -A TEMPLATES=(
    [sh]="#!/usr/bin/env bash
set -euo pipefail
echo 'Hello from Bash'"
    [py]="#!/usr/bin/env python3
def main():
    print('Hello from Python')
if __name__ == '__main__':
    main()"
    [lua]=""   # handled separately
    [c]="#include <stdio.h>
int main() { printf(\"Hello from C\\n\"); return 0; }"
    [cpp]="#include <iostream>
int main() { std::cout << \"Hello from C++\" << std::endl; return 0; }"
    [rs]=""    # rust handled by cargo
    [go]="package main
import \"fmt\"
func main() { fmt.Println(\"Hello from Go\") }"
    [zig]=""   # zig init will supply defaults
)

# aliases
TEMPLATES[bash]="${TEMPLATES[sh]}"
TEMPLATES[rust]="${TEMPLATES[rs]}"

# Globals
AUTO_YES=false
PROJECT_NAME=""
LANGUAGE=""

function print_color() { printf "${1}%s${RESET}\n" "${2}"; }

# -----------------------------
# mkproj
# -----------------------------
function mkproj() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -n|--name) PROJECT_NAME="${2-}"; shift 2 ;;
            -l|--lang) LANGUAGE="${2-}"; shift 2 ;;
            -y|--yes) AUTO_YES=true; shift ;;
            *) shift ;;
        esac
    done

    [[ -z "$PROJECT_NAME" ]] && read -rp "Project Name: " PROJECT_NAME
    [[ -z "$PROJECT_NAME" ]] && print_color "$RED" "❌ No name given." && return 1
    [[ "$PROJECT_NAME" =~ [^a-zA-Z0-9_-] ]] && print_color "$RED" "❌ Invalid project name." && return 1

    if [[ -z "${LANGUAGE:-}" ]]; then
        LANGS=$(IFS=,; echo "${!TEMPLATES[*]}")
        read -rp "Language ($LANGS): " LANGUAGE
    fi
    LANGUAGE=$(echo "$LANGUAGE" | tr '[:upper:]' '[:lower:]')
    [[ "$LANGUAGE" == "c++" ]] && LANGUAGE="cpp"
    [[ "$LANGUAGE" == "bash" ]] && LANGUAGE="sh"
    [[ "$LANGUAGE" == "python" ]] && LANGUAGE="py"
    [[ "$LANGUAGE" == "rust" ]] && LANGUAGE="rs"

    [[ -z "${TEMPLATES[$LANGUAGE]+x}" ]] && print_color "$YELLOW" "⚠️  Unknown language. Creating basic scaffolding."

    proj_path="$PROJECTS_DIR/$PROJECT_NAME"
    case "$LANGUAGE" in
        py|sh) mkdir -pv "$proj_path/src" ;;
        lua) mkdir -pv "$proj_path/lua/$PROJECT_NAME/functions" "$proj_path/plugin" ;;
        rs) mkdir -pv "$proj_path" ;;
        c|cpp|go) mkdir -pv "$proj_path/src" "$proj_path/include" "$proj_path/bin" ;;
        zig) mkdir -pv "$proj_path/src" "$proj_path/include" ;;
        *) mkdir -pv "$proj_path/src" ;;
    esac

    cd "$proj_path" || return

    case "$LANGUAGE" in
        sh)
            echo "${TEMPLATES[sh]}" > "src/main.sh"
            chmod +x "src/main.sh"
            print_color "$GREEN" "Created src/main.sh"
            ;;
        py)
            echo "${TEMPLATES[py]}" > "src/main.py"
            chmod +x "src/main.py"
            if command -v python3 >/dev/null 2>&1; then
                python3 -m venv "../$PROJECT_NAME" 2>/dev/null || true
                print_color "$GREEN" "✅ Python venv created (or already existed)"
            fi
            ;;
        lua)
            cat > "lua/$PROJECT_NAME/init.lua" <<'EOF'
local M = {}
function M.setup()
  print("Hello from Lua")
end
return M
EOF
            chmod a+x "lua/$PROJECT_NAME/init.lua"
            print_color "$GREEN" "Created lua/$PROJECT_NAME/init.lua"
            ;;
        rs)
            if command -v cargo >/dev/null 2>&1; then
                (cargo init --name "$PROJECT_NAME" . 2>&1) | sed 's/^/cargo: /' >&2 || true
                print_color "$GREEN" "Initialized Rust project with cargo"
                cargo build --release >/dev/null 2>&1 && print_color "$GREEN" "✅ Rust compiled"
            else
                print_color "$RED" "cargo not found"
            fi
            ;;
        zig)
            print_color "$GREEN" "Preparing Zig project; using 'zig init' defaults"
            if command -v zig >/dev/null 2>&1; then
                [[ ! -f build.zig ]] && zig init 2> >(sed 's/^/zig: /' >&2) && print_color "$GREEN" "✅ zig init completed"
                built=false
                for mode in fast safe small any off; do
                    if zig build --release="$mode" 2> >(sed 's/^/zig: /' >&2); then
                        built=true
                        used_mode="$mode"
                        break
                    fi
                done
                [[ $built == false ]] && zig build 2> >(sed 's/^/zig: /' >&2) && used_mode="(none)"
                exe_path=$(find zig-out -type f -executable -print 2>/dev/null | head -n1 || true)
                [[ -n "$exe_path" ]] && print_color "$GREEN" "✅ Zig build succeeded (mode: $used_mode). Executable: $exe_path" || print_color "$YELLOW" "zig build ran but no executable detected."
            else
                print_color "$RED" "zig not found"
            fi
            ;;
        c)
            echo "${TEMPLATES[c]}" > "src/main.c"
            command -v gcc >/dev/null 2>&1 && gcc "src/main.c" -o "bin/$PROJECT_NAME" && print_color "$GREEN" "✅ C compiled to bin/$PROJECT_NAME"
            ;;
        cpp)
            echo "${TEMPLATES[cpp]}" > "src/main.cpp"
            command -v g++ >/dev/null 2>&1 && g++ "src/main.cpp" -o "bin/$PROJECT_NAME" && print_color "$GREEN" "✅ C++ compiled to bin/$PROJECT_NAME"
            ;;
        go)
            echo "${TEMPLATES[go]}" > "src/main.go"
            command -v go >/dev/null 2>&1 && go build -o "bin/$PROJECT_NAME" "src/main.go" && print_color "$GREEN" "✅ Go compiled to bin/$PROJECT_NAME"
            ;;
        *)
            print_color "$YELLOW" "⚠️  Unknown language: created basic src/"
            ;;
    esac

    setup_gitignore
    print_color "$GREEN" "✅ Project created at $proj_path"
    check_and_offer_setup
}

# -----------------------------
# mkgit
# -----------------------------
function mkgit() {
    [[ -d .git ]] && { print_color "$YELLOW" "⚙️ Git repo exists."; return; }
    git init
    git add .
    git commit -m "Initial commit"
    print_color "$GREEN" "✅ Git initialized."
}

# -----------------------------
# .gitignore creation
# -----------------------------
function setup_gitignore() {
    case "$LANGUAGE" in
        sh)
            cat > .gitignore <<EOF
# Shell scripts
*.swp
EOF
            ;;
        py)
            cat > .gitignore <<EOF
# Python
__pycache__/
*.py[cod]
*.swp
venv/
EOF
            ;;
        lua)
            cat > .gitignore <<EOF
# Lua
*.swp
EOF
            ;;
        c|cpp)
            cat > .gitignore <<EOF
# C/C++
*.o
*.exe
bin/
*.swp
EOF
            ;;
        go)
            cat > .gitignore <<EOF
# Go
bin/
*.exe
*.swp
EOF
            ;;
        rs)
            cat > .gitignore <<EOF
# Rust
target/
*.swp
EOF
            ;;
        zig)
            cat > .gitignore <<EOF
# Zig
zig-out/
*.swp
EOF
            ;;
        *)
            cat > .gitignore <<EOF
# General
*.swp
EOF
            ;;
    esac

    print_color "$GREEN" "✅ .gitignore created/overwritten for $LANGUAGE"
}


# -----------------------------
# Docs setup
# -----------------------------
function setupdocs() {
    name="$(basename "$PWD")"
    year="$(date +%Y)"
    author="$(git config user.name 2>/dev/null || whoami 2>/dev/null || echo 'Unknown Author')"
    cat > README.md <<EOF
# $name
A new project written in awesome code.

## Usage
\`\`\`bash
# Run or build instructions go here
\`\`\`

## License
MIT
EOF
    cat > LICENSE <<EOF
MIT License

Copyright (c) $year $author

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
EOF
    print_color "$GREEN" "✅ README.md and LICENSE created"
}

# -----------------------------
# Offer setup for docs/git
# -----------------------------
function check_and_offer_setup() {
    if $AUTO_YES; then
        setupdocs
        [[ "$LANGUAGE" != "rs" && ! -d .git ]] && mkgit
    else
        [[ ! -f README.md || ! -f LICENSE ]] && read -rp "❔ Set up docs now? (y/N): " ans && [[ "$ans" =~ ^[Yy]$ ]] && setupdocs
        [[ "$LANGUAGE" != "rs" && ! -d .git ]] && read -rp "❔ Initialize Git? (y/N): " ans && [[ "$ans" =~ ^[Yy]$ ]] && mkgit
    fi
}

# -----------------------------
# Usage/help
# -----------------------------
function usage() {
    cat <<'EOF'
Usage: projtool <command> [options]

Commands:
  mkproj       Create a new project
               Options:
                 -n <name>       Project name
                 -l <lang>       Language (sh, py, lua, c, cpp, rs, go, zig)
                 -y              Skip prompts and set up docs/git automatically
  mkgit        Initialize Git in current directory
  setupdocs    Create README.md and LICENSE
EOF
}

# -----------------------------
# Main dispatcher
# -----------------------------
case "${1:-}" in
    mkproj)
        shift
        mkproj "$@"
        ;;
    mkgit) mkgit ;;
    setupdocs) setupdocs ;;
    *) usage ;;
esac

