#!/usr/bin/env bash
set -euo pipefail

PROJECTS_DIR="${PROJECTS_DIR:-$HOME/Projects}"
mkdir -pv "$PROJECTS_DIR"

# Colors
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
RESET="\033[0m"

declare -A TEMPLATES=(
    [sh]="#!/usr/bin/env bash
set -euo pipefail
echo 'Hello from Bash'"
    [py]="#!/usr/bin/env python3
def main():
    print('Hello from Python')
if __name__ == '__main__':
    main()"
    [lua]=""
    [c]="#include <stdio.h>
int main() { printf(\"Hello from C\\n\"); return 0; }"
    [cpp]="#include <iostream>
int main() { std::cout << \"Hello from C++\" << std::endl; return 0; }"
    [rs]=""
    [go]="package main
import \"fmt\"
func main() { fmt.Println(\"Hello from Go\") }"
    [zig]=""
)

TEMPLATES[bash]="${TEMPLATES[sh]}"
TEMPLATES[rust]="${TEMPLATES[rs]}"

AUTO_YES=false
PROJECT_NAME=""
LANGUAGE=""

function print_color() { printf "${1}%s${RESET}\n" "${2}"; }

# -----------------------------
# mkproj
# -----------------------------
function mkproj() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -n|--name) PROJECT_NAME="${2-}"; shift 2 ;;
            -l|--lang) LANGUAGE="${2-}"; shift 2 ;;
            -y|--yes) AUTO_YES=true; shift ;;
            *) shift ;;
        esac
    done

    # -----------------------------
    # Interactive prompts
    # -----------------------------
    [[ -z "$PROJECT_NAME" ]] && read -rp " Project Name: " PROJECT_NAME
    [[ -z "$PROJECT_NAME" ]] && print_color "$RED" "‚ùå No name given." && return 1
    [[ "$PROJECT_NAME" =~ [^a-zA-Z0-9_-] ]] && print_color "$RED" "‚ùå Invalid project name." && return 1

    if [[ -z "$LANGUAGE" ]]; then
        LANGS=$(IFS=,; echo "${!TEMPLATES[*]}")
        read -rp " Language ($LANGS): " LANGUAGE
    fi
    LANGUAGE=$(echo "$LANGUAGE" | tr '[:upper:]' '[:lower:]')

    # Normalize some languages
    [[ "$LANGUAGE" == "c++" ]] && LANGUAGE="cpp"
    [[ "$LANGUAGE" == "bash" ]] && LANGUAGE="sh"
    [[ "$LANGUAGE" == "python" ]] && LANGUAGE="py"
    [[ "$LANGUAGE" == "rust" ]] && LANGUAGE="rs"

    [[ -z "${TEMPLATES[$LANGUAGE]+x}" ]] && print_color "$YELLOW" "‚ö†Ô∏è  Unknown language. Creating empty folder."

    # -----------------------------
    # Folder structure
    # -----------------------------
    proj_path="$PROJECTS_DIR/$PROJECT_NAME"

    # Rust does not need bin/
    if [[ "$LANGUAGE" == "rs" ]]; then
        mkdir -pv "$proj_path/src" "$proj_path/include"
    else
        mkdir -pv "$proj_path/src" "$proj_path/include" "$proj_path/bin"
    fi

    [[ "$LANGUAGE" == "lua" ]] && mkdir -pv "$proj_path/lua/$PROJECT_NAME/functions" "$proj_path/plugin"
    cd "$proj_path" || return

    # -----------------------------
    # Language creation
    # -----------------------------
    case "$LANGUAGE" in
        sh|py|c|cpp|go)
            file_ext="$LANGUAGE"
            [[ "$LANGUAGE" == "py" ]] && file_ext="py" && python3 -m venv "../$PROJECT_NAME"
            [[ "$LANGUAGE" == "sh" ]] && file_ext="sh"
            [[ "$LANGUAGE" == "c" ]] && file_ext="c"
            [[ "$LANGUAGE" == "cpp" ]] && file_ext="cpp"
            [[ -n "${TEMPLATES[$LANGUAGE]}" ]] && echo "${TEMPLATES[$LANGUAGE]}" > "src/main.$file_ext"
            chmod +x "src/main.$file_ext"
            ;;
        lua)
            cat << 'EOF' > "lua/$PROJECT_NAME/init.lua"
local M = {}
function M.setup()
  print("Hello from Lua")
end
return M
EOF
            chmod a+x "lua/$PROJECT_NAME/init.lua"
            ;;
        rs)
            cargo init --name "$PROJECT_NAME" .
            cargo build --release && print_color "$GREEN" "‚úÖ Rust compiled (target/release/$PROJECT_NAME)"
            ;;
        zig)
            zig init
            if [[ -f src/main.zig ]]; then
                mkdir -pv bin
                zig build-exe "src/main.zig" -O ReleaseFast -target native -o "bin/$PROJECT_NAME"
                print_color "$GREEN" "‚úÖ Zig compiled to bin/$PROJECT_NAME"
            fi
            ;;
        *)
            print_color "$YELLOW" "‚ö†Ô∏è  Unknown language. Empty folder created."
            ;;
    esac

    # -----------------------------
    # Compiled language auto-build
    # -----------------------------
    case "$LANGUAGE" in
        c)
            [[ -f src/main.c ]] && gcc "src/main.c" -o "bin/$PROJECT_NAME" && print_color "$GREEN" "‚úÖ C compiled to bin/$PROJECT_NAME"
            ;;
        cpp)
            [[ -f src/main.cpp ]] && g++ "src/main.cpp" -o "bin/$PROJECT_NAME" && print_color "$GREEN" "‚úÖ C++ compiled to bin/$PROJECT_NAME"
            ;;
        go)
            [[ -f src/main.go ]] && go build -o "bin/$PROJECT_NAME" "src/main.go" && print_color "$GREEN" "‚úÖ Go compiled to bin/$PROJECT_NAME"
            ;;
    esac

    # -----------------------------
    # Gitignore and feedback
    # -----------------------------
    setup_gitignore
    print_color "$GREEN" "‚úÖ Project created at $proj_path"
    check_and_offer_setup
}

# -----------------------------
# Git init
# -----------------------------
function mkgit() {
    [[ -d .git ]] && print_color "$YELLOW" "‚öôÔ∏è Git repo exists." && return
    git init
    git add .
    git commit -m "Initial commit"
    print_color "$GREEN" "‚úÖ Git initialized."
}

# -----------------------------
# Gitignore
# -----------------------------
function setup_gitignore() {
    [[ -f .gitignore && $AUTO_YES == true ]] && return
    case "$LANGUAGE" in
        py) cat << EOF > .gitignore
__pycache__/
*.py[cod]
venv/
EOF
            ;;
        sh) cat << EOF > .gitignore
*.swp
EOF
            ;;
        c|cpp) cat << EOF > .gitignore
bin/
*.o
*.exe
EOF
            ;;
        go) cat << EOF > .gitignore
bin/
*.exe
EOF
            ;;
        rs) cat << EOF > .gitignore
target/
*.rs.bk
EOF
            ;;
        zig) cat << EOF > .gitignore
bin/
*.o
EOF
            ;;
        lua) cat << EOF > .gitignore
*.luac
EOF
            ;;
    esac
    print_color "$GREEN" "‚úÖ .gitignore created"
}

# -----------------------------
# Docs setup (ShellCheck compliant)
# -----------------------------
function setupdocs() {
    name="$(basename "$PWD")"
    year="$(date +%Y)"
    author="$(git config user.name 2>/dev/null || whoami 2>/dev/null || echo 'Unknown Author')"

    # README.md
    if [[ -f README.md && $AUTO_YES == false ]]; then
        read -rp "üìÑ README.md exists. Overwrite? (y/N): " ans
        [[ "$ans" =~ ^[Yy]$ ]] && overwrite_readme=true || overwrite_readme=false
    fi
    if [[ ! -f README.md || "${overwrite_readme:-true}" == true ]]; then
        cat << EOF > README.md
# $name
A new project written in awesome code.

## Usage
\`\`\`bash
# Run or build instructions go here
\`\`\`

## License
MIT
EOF
        print_color "$GREEN" "‚úÖ README.md created"
    else
        print_color "$YELLOW" "üìÑ README.md skipped"
    fi

    # LICENSE
    if [[ -f LICENSE && $AUTO_YES == false ]]; then
        read -rp "üìú LICENSE exists. Overwrite? (y/N): " ans
        [[ "$ans" =~ ^[Yy]$ ]] && overwrite_license=true || overwrite_license=false
    fi
    if [[ ! -f LICENSE || "${overwrite_license:-true}" == true ]]; then
        cat << EOF > LICENSE
MIT License

Copyright (c) $year $author

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
EOF
        print_color "$GREEN" "‚úÖ LICENSE created"
    else
        print_color "$YELLOW" "üìú LICENSE skipped"
    fi
}

# -----------------------------
# Offer setup for docs/git
# -----------------------------
function check_and_offer_setup() {
    if $AUTO_YES; then
        setupdocs
        [[ "$LANGUAGE" != "rs" ]] && mkgit
    else
        [[ ! -f README.md || ! -f LICENSE ]] && read -rp "‚ùî Set up docs now? (y/N): " ans && [[ "$ans" =~ ^[Yy]$ ]] && setupdocs
        [[ "$LANGUAGE" != "rs" && ! -d .git ]] && read -rp "‚ùî Initialize Git? (y/N): " ans && [[ "$ans" =~ ^[Yy]$ ]] && mkgit
    fi
}

# -----------------------------
# Usage/help
# -----------------------------
function usage() {
    cat << 'EOF'
Usage: projtool <command> [options]

Commands:
  mkproj       Create a new project
               Options:
                 -n <name>       Project name
                 -l <lang>       Language (sh, py, lua, c, cpp, rs, go, zig)
                 -y              Skip prompts and set up docs/git automatically
  mkgit        Initialize Git in current directory
  setupdocs    Create README.md and LICENSE
EOF
}

# -----------------------------
# Main dispatcher
# -----------------------------
case "${1:-}" in
    mkproj)
        shift
        mkproj "$@"
        ;;
    mkgit) mkgit ;;
    setupdocs) setupdocs ;;
    *) usage ;;
esac

