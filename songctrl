#!/bin/env bash

set -euo pipefail

opt="${1:-}"
player="${2:-Supersonic}"
cutpoint="${3:-0}"
cmd="pkill -RTMIN+14 dwmblocks"

song_togglepause() {
    playerctl play-pause --player="$player"
    $cmd
}

song_skip() {
    playerctl next --player="$player"
    $cmd
}

song_previous() {
    playerctl previous --player="$player"
    $cmd
}

song_title() {
    local title_status=$(playerctl status --player="$player" 2>/dev/null || echo "")

    if [[ "$title_status" == "Playing" ]]; then
        title=$(playerctl metadata title --player="$player")

        if (( cutpoint > 0 )) && (( ${#title} > cutpoint )); then
            # Cut at nearest word before cutpoint
            truncated="${title:0:$cutpoint}"
            clean_cut=$(echo "$truncated" | awk -v max="$cutpoint" '{
                s = ""; for (i = 1; i <= NF; i++) {
                    if (length(s $i) + 1 <= max) s = s $i " ";
                    else break;
                } sub(/[ \t]+$/, "", s); print s
            }')
            echo "$clean_cut ..."
        else
            echo "$title"
        fi
    else
        echo "Not Playing/Paused"
    fi
    $cmd
}

song_state() {
    local song_status=$(playerctl status --player="$player" 2>/dev/null || echo "")

    case "$song_status" in
        Playing)
            echo " "
            ;;
        Paused)
            echo " "
            ;;
        Stopped)
            echo " "
            ;;
        *)
            if flatpak ps 2>/dev/null | awk '{print $3}' | grep -Fxq "io.github.dweymouth.supersonic"; then
                echo " "
            else
                echo " "
            fi
            ;;
    esac
    $cmd
}

song_state_title() {
    echo "$(song_state)$(song_title)"
    $cmd
}

help_menu() {
    cat <<EOF
Usage: $(basename "$0") [OPTION] [PLAYER] [CUTPOINT]

Options:
  --help, -h          Show this help message
  --togglepause, -tp  Toggle play/pause
  --skip, -s          Skip to next track
  --previous, -p      Go to previous track
  --songtitle, -st    Show current song title (with optional cutpoint)
  --songstate, -ss    Show song state symbol
  --songstatetitle, -sst Show song state symbol and title
EOF
}

case "$opt" in
    --togglepause|-tp)
        song_togglepause ;;
    --skip|-s)
        song_skip ;;
    --previous|-p)
        song_previous ;;
    --songtitle|-st)
        song_title ;;
    --songstate|-ss)
        song_state ;;
    --songstatetitle|-sst)
        song_state_title ;;
    --help|-h)
        help_menu ;;
    *)
        echo "Error: '${opt:- }' is an invalid option."
        help_menu
        exit 1 ;;
esac
