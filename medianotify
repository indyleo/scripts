#!/bin/env bash
# medianotify (auto-reconnect version)

set -euo pipefail

TMPDIR="${XDG_RUNTIME_DIR:-/tmp}/media-notify"
mkdir -p "$TMPDIR"
ICON_FALLBACK="/usr/share/icons/hicolor/64x64/apps/multimedia-player.png"

# ---- Configurable ----
SONG_PLAYERS=("SubsonicTUI")
BROWSER_PLAYERS=("firefox" "chromium" "brave" "google-chrome")

# -----------------------

notify_song() {
    local title="$1"
    local artist="$2"
    local album="$3"
    local arturl="$4"

    local body=""
    [ -n "$artist" ] && body="$artist"
    [ -n "$album" ] && body="${body}${body:+ â€” }$album"

    local icon_path="$ICON_FALLBACK"

    if [ -n "$arturl" ]; then
        arturl="${arturl#file://}"
        local fname
        fname="$(echo "$arturl" | sed 's/[^a-zA-Z0-9._-]/_/g')"
        icon_path="$TMPDIR/$fname"

        if [[ "$arturl" =~ ^https?:// ]]; then
            curl -s -L --fail "$arturl" -o "$icon_path" || icon_path="$ICON_FALLBACK"
        elif [ -f "$arturl" ]; then
            cp "$arturl" "$icon_path" || icon_path="$ICON_FALLBACK"
        fi
    fi

    notify-send "$title" "$body" --icon="$icon_path"
}

find_player() {
    local -n list=$1
    local active
    active=$(playerctl -l 2>/dev/null || true)
    for p in "${list[@]}"; do
        match=$(echo "$active" | grep -i "^$p" | head -n1 || true)
        if [[ -n "$match" ]]; then
            echo "$match"
            return 0
        fi
    done
    return 1
}

watch_player() {
    local player="$1"
    local type="$2" # song or browser
    local last_title=""

    echo "ðŸŽ§ Watching $type player: $player"

    playerctl -p "$player" metadata --follow | while read -r _; do
        local title artist album arturl
        title=$(playerctl -p "$player" metadata title 2>/dev/null || echo "")
        artist=$(playerctl -p "$player" metadata artist 2>/dev/null || echo "")
        album=$(playerctl -p "$player" metadata album 2>/dev/null || echo "")
        arturl=$(playerctl -p "$player" metadata mpris:artUrl 2>/dev/null || echo "")

        # Only notify if the title changed
        if [[ -n "$title" && "$title" != "$last_title" ]]; then
            notify_song "$title" "$artist" "$album" "$arturl"
            last_title="$title"
        fi
    done
}

# Keeps retrying until a player appears
wait_for_player() {
    local listname="$1"
    local notify_on_fail="${2:-false}"
    local player=""

    while true; do
        player=$(find_player "$listname" || true)
        if [[ -n "$player" ]]; then
            echo "$player"
            return 0
        fi
        if [[ "$notify_on_fail" == true ]]; then
            notify-send "No music player found" "Waiting for Spotify/VLC/SubsonicTUI..."
            notify_on_fail=false # only show once
        fi
        sleep 1
    done
}

# ---- Argument handling ----
mode="${1:-both}"

case "$mode" in
    song)
        song_player=$(wait_for_player SONG_PLAYERS true)
        watch_player "$song_player" "song"
        ;;
    browser)
        browser_player=$(wait_for_player BROWSER_PLAYERS false)
        watch_player "$browser_player" "browser"
        ;;
    both)
        (
            song_player=$(wait_for_player SONG_PLAYERS true)
            watch_player "$song_player" "song"
        ) &

        (
            browser_player=$(wait_for_player BROWSER_PLAYERS false)
            watch_player "$browser_player" "browser"
        ) &

        wait
        ;;
    *)
        echo "Usage: $(basename "$0") [song|browser|both]"
        exit 1
        ;;
esac
