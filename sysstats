#!/bin/env bash

set -euo pipefail

opt="${1:-}"

# ===== GLOBAL THEME CONFIG =====
THEME_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/theme"
THEME="$(cat "$THEME_FILE" 2>/dev/null | tr '[:upper:]' '[:lower:]')"
[[ -z "$THEME" ]] && THEME="gruvbox"

# Gruvbox (default)
if [[ $THEME == *gruvbox* ]]; then
    # Default
    COL_WHITE="#ebdbb2"
    COL_GREEN="#98971a"
    COL_YELLOW="#d79921"
    COL_RED="#cc241d"
    COL_ORANGE="#d65d0e"
    COL_BLUE="#458588"
    COL_PURPLE="#b16286"
    COL_BG="#282828"

    # Nord
elif [[ $THEME == *nord* ]]; then
    # Default
    COL_WHITE="#ECEFF4"
    COL_GREEN="#A3BE8C"
    COL_YELLOW="#EBCB8B"
    COL_RED="#BF616A"
    COL_ORANGE="#D08770"
    COL_BLUE="#81A1C1"
    COL_PURPLE="#B48EAD"
    COL_BG="#2E3440"
fi

function ttime() {
    date +"󰥔  %I:%M %p"
}

function ddate() {
    date +"  %A %B %d %Y"
}

function date_time() {
    date +"󰥔  %I:%M %p |   %A %B %d %Y"
}

function cpu_load() {
    load="$(awk '{print $1}' /proc/loadavg)"
    echo "  $load%"
}

function disk_usage() {
    disk_info=$(df -h / | tail -1)
    total=$(echo $disk_info | awk '{print $2}')
    used=$(echo $disk_info | awk '{print $3}')
    echo "󰋊 $used/$total"
}

function memory_usage() {
    used="$(free -h | awk 'NR==2 {print $3}')"
    total="$(free -h | awk 'NR==2 {print $2}')"
    echo "󰍛 $used/$total"
}

function wifi_status() {
    current=$(iwgetid -r)
    if [[ -z "$current" ]]; then
        icon="󰖪"
        msg="Disconnected"
        color="$COL_RED"
    else
        icon="󰖩"
        msg="$current"
        color="$COL_GREEN"
    fi
    echo "^c${COL_WHITE}^${icon} ^c${color}^${msg}^d^"
}

function tail_status() {
    if tailscale status &>/dev/null; then
        if tailscale status | grep -q "Logged out"; then
            icon="󰈂"
            msg="Not connected"
            color="$COL_RED"
        else
            icon="󰈁"
            msg="Connected"
            color="$COL_GREEN"
        fi
    else
        icon="󰈂"
        msg="󰈂 Not connected"
        color="$COL_RED"
    fi
    echo "^c${COL_WHITE}^${icon} ^c${color}^${msg}^d^"
}

function is_media() {
    local rec=0 stream=0
    [[ -f "/tmp/recpid" ]] && rec=1
    [[ -f "/tmp/streampid" ]] && stream=1

    if [[ $rec -eq 1 && $stream -eq 1 ]]; then
        icon="󰑊"
        msg="Recording & Streaming"
        color="$COL_GREEN"
    elif [[ $rec -eq 1 ]]; then
        icon="󰑊"
        msg="Recording"
        color="$COL_GREEN"
    elif [[ $stream -eq 1 ]]; then
        icon="󰑊"
        msg="Streaming"
        color="$COL_GREEN"
    else
        icon=""
        msg="Not Recording/Streaming"
        color="$COL_RED"
    fi

    echo "^c${COL_WHITE}^${icon} ^c${color}^${msg}^d^"
}

function bbattery() {
    # --- Get battery info ---
    battery_info=$(acpi -b 2>/dev/null)
    valid_batteries=$(echo "$battery_info" | grep -v "Unknown" | grep -v "rate information unavailable")
    if [ -n "$valid_batteries" ]; then
        active_battery_line=$(echo "$valid_batteries" | head -n 1)
    else
        active_battery_line=$(echo "$battery_info" | head -n 1)
    fi

    percent=$(echo "$active_battery_line" | grep -o '[0-9]\+%' | tr -d '%')
    status=$(echo "$active_battery_line" | cut -d: -f2 | cut -d, -f1 | xargs)

    # --- Pick icon based on status/percentage ---
    case "$status" in
        Charging|Not\ charging)
            if   [[ $percent -ge 100 ]]; then icon="󰂅 "
            elif [[ $percent -ge 90 ]];  then icon="󰂋 "
            elif [[ $percent -ge 80 ]];  then icon="󰂊 "
            elif [[ $percent -ge 70 ]];  then icon="󰢞 "
            elif [[ $percent -ge 60 ]];  then icon="󰂉 "
            elif [[ $percent -ge 50 ]];  then icon="󰢝 "
            elif [[ $percent -ge 40 ]];  then icon="󰂈 "
            elif [[ $percent -ge 30 ]];  then icon="󰂇 "
            elif [[ $percent -ge 20 ]];  then icon="󰂆 "
            elif [[ $percent -ge 10 ]];  then icon="󰢜 "
            else                          icon="󰢟 "
            fi
            color="$COL_GREEN"
            ;;
        Discharging)
            if   [[ $percent -ge 100 ]]; then icon="󰁹 "
            elif [[ $percent -ge 90 ]];  then icon="󰂂 "
            elif [[ $percent -ge 80 ]];  then icon="󰂁 "
            elif [[ $percent -ge 70 ]];  then icon="󰂀 "
            elif [[ $percent -ge 60 ]];  then icon="󰁿 "
            elif [[ $percent -ge 50 ]];  then icon="󰁾 "
            elif [[ $percent -ge 40 ]];  then icon="󰁽 "
            elif [[ $percent -ge 30 ]];  then icon="󰁼 "
            elif [[ $percent -ge 20 ]];  then icon="󰁻 "
            elif [[ $percent -ge 10 ]];  then icon="󰁺 "
            else                          icon="󰂎 "
            fi
            color="$COL_YELLOW"
            ;;
        Full)
            icon="󰂄 "
            color="$COL_PURPLE"
            ;;
        *)
            icon="󰂑 "
            color="$COL_WHITE"
            ;;
    esac

    # --- Output for status2d ---
    # White icon, colored percentage
    echo "^c${COL_WHITE}^${icon}^c${color}^${percent}%^d^"
}


function vvolume() {
    vol="$(pamixer --get-volume)"
    muted=$(pamixer --get-mute)
    if [[ "$vol" -eq 100 && "$muted" == "false" ]]; then
        icon=""
        color="$COL_PURPLE"
        msg="${vol}%"  # Max volume
    elif [[ "$vol" -ge 75 && "$muted" == "false" ]]; then
        icon="󰕾"
        color="$COL_BLUE"
        msg="${vol}%"  # High volume
    elif [[ "$vol" -ge 50 && "$muted" == "false" ]]; then
        icon="󰕾"
        color="$COL_GREEN"
        msg="${vol}%"  # High volume
    elif [[ "$vol" -ge 25 && "$muted" == "false" ]]; then
        icon="󰖀"
        color="$COL_YELLOW"
        msg="${vol}%"  # Medium volume
    elif [[ "$vol" -gt 0 && "$muted" == "false" ]]; then
        icon="󰕿"
        msg="${vol}%"  # Low volume
        color="$COL_ORANGE"
    else
        if [[ "$muted" == "true" ]]; then
            icon="󰝟"
            msg="${vol}%"  # Muted
            color="$COL_RED"
        else
            icon="󰝟"
            msg="Muted"  # 0
            color="$COL_RED"
        fi
    fi
    echo "^c${COL_WHITE}^${icon} ^c${color}^${msg}^d^"
}

function bbrightness() {
    brightness_raw=$(cat /sys/class/backlight/*/brightness 2>/dev/null)
    max_brightness=$(cat /sys/class/backlight/*/max_brightness 2>/dev/null)
    [[ -z "$brightness_raw" || -z "$max_brightness" ]] && brightness=0
    brightness=$(( brightness_raw * 100 / max_brightness ))

    # --- Determine color based on brightness using vvolume colors ---
    if [[ "$brightness" -ge 100 ]]; then
        color="$COL_PURPLE"
    elif [[ "$brightness" -ge 75 ]]; then
        color="$COL_BLUE"
    elif [[ "$brightness" -ge 50 ]]; then
        color="$COL_GREEN"
    elif [[ "$brightness" -ge 25 ]]; then
        color="$COL_YELLOW"
    elif [[ "$brightness" -gt 0 ]]; then
        color="$COL_ORANGE"
    else
        color="$COL_RED"
    fi

    # --- Map icons (keep your existing ones) ---
    if [[ "$brightness" -ge 100 ]]; then icon="󰛨"
    elif [[ "$brightness" -ge 90 ]]; then icon="󱩖"
    elif [[ "$brightness" -ge 80 ]]; then icon="󱩖"
    elif [[ "$brightness" -ge 70 ]]; then icon="󱩕"
    elif [[ "$brightness" -ge 60 ]]; then icon="󱩔"
    elif [[ "$brightness" -ge 50 ]]; then icon="󱩓"
    elif [[ "$brightness" -ge 40 ]]; then icon="󱩒"
    elif [[ "$brightness" -ge 30 ]]; then icon="󱩑"
    elif [[ "$brightness" -ge 20 ]]; then icon="󱩐"
    elif [[ "$brightness" -ge 10 ]]; then icon="󱩏"
    else icon="󱩎"
    fi

    # --- Output for status2d ---
    echo "^c${COL_WHITE}^${icon} ^c${color}^${brightness}%^d^"
}

function all_stats() {
    echo "$(is_media) | $(disk_usage) | $(memory_usage) | $(cpu_load) | $(bbrightness) | $(vvolume) | $(bbattery) | $(wifi_status) | $(tail_status) | $(ddate) | $(ttime)"
}

function help_menu() {
    cat <<EOF
  Usage: $(basename "$0") [OPTION]

  Options:
    -h, --help  Show this help message
    cpu         Display CPU load
    mem         Display memory usage
    disk        Display disk usage
    wifi        Display WiFi connection status
    tail        Display tailscale connection status
    date        Display date
    time        Display time
    date_time   Display date and time
    ismedia     Display rec/stream status
    battery     Display battery status
    volume      Display volume
    brightness  Display brightness
    all         Display all stats
EOF
}

case "$opt" in
    cpu)
        cpu_load
        ;;
    mem)
        memory_usage
        ;;
    disk)
        disk_usage
        ;;
    wifi)
        wifi_status
        ;;
    tail)
        tail_status
        ;;
    date)
        ddate
        ;;
    time)
        ttime
        ;;
    date_time)
        date_time
        ;;
    ismedia)
        is_media
        ;;
    battery)
        bbattery
        ;;
    volume)
        vvolume
        ;;
    brightness)
        bbrightness
        ;;
    all)
        all_stats
        ;;
    --help|-h)
        help_menu
        ;;
    *)
        echo "Error: Unknown argument '${opt:- }'."
        help_menu
        exit 1
        ;;
esac
