#!/bin/env bash

set -euo pipefail

opt="${1:-}"

function ttime() {
    date +"󰥔  %I:%M %p"
}

function ddate() {
    date +"  %A %B %d %Y"
}

function date_time() {
    date +"󰥔  %I:%M %p |   %A %B %d %Y"
}

function cpu_load() {
    load="$(awk '{print $1}' /proc/loadavg)"
    echo "  $load%"
}

function disk_usage() {
    disk_info=$(df -h / | tail -1)
    total=$(echo $disk_info | awk '{print $2}')
    used=$(echo $disk_info | awk '{print $3}')
    echo "󰋊 $used/$total"
}

function memory_usage() {
    used="$(free -h | awk 'NR==2 {print $3}')"
    total="$(free -h | awk 'NR==2 {print $2}')"
    echo "󰍛 $used/$total"
}

function wifi_status() {
    current=$(iwgetid -r)
    if [[ -z "$current" ]]; then
        echo "󰖪 Disconnected"
    else
        echo "󰖩 $current"
    fi
}

function tail_status() {
    if tailscale status &>/dev/null; then
        if tailscale status | grep -q "Logged out"; then
            echo "󰈂 Not connected"
        else
            echo "󰈁 Connected"
        fi
    else
        echo "󰈂 Not connected"
    fi
}

function issrec() {
    if [[ -f "/tmp/recordingicon" ]]; then
        cat "/tmp/recordingicon"
    elif [[ ! -f "/tmp/recordicon" ]]; then
        echo "  Not Recording"
    fi
}

function bbattery() {
    # Get battery info
    battery_info=$(acpi -b)

    # Filter out lines with "Unknown" or "rate information unavailable"
    valid_batteries=$(echo "$battery_info" | grep -v "Unknown" | grep -v "rate information unavailable")

    # Use the first valid battery, or fallback to the first available
    if [ -n "$valid_batteries" ]; then
        active_battery_line=$(echo "$valid_batteries" | head -n 1)
    else
        active_battery_line=$(echo "$battery_info" | head -n 1)
    fi

    # Extract the percentage
    percent=$(echo "$active_battery_line" | grep -o '[0-9]\+%' | tr -d '%')

    # Extract the status: Charging, Discharging, Full, etc.
    status=$(echo "$active_battery_line" | cut -d: -f2 | cut -d, -f1 | xargs)

    # Choose an icon based on status
    case "$status" in
        Charging|Not\ charging)
            if [[ $percent -ge 100 ]]; then icon="󰂅 "
            elif [[ $percent -ge 90 ]]; then icon="󰂋 "
            elif [[ $percent -ge 80 ]]; then icon="󰂊 "
            elif [[ $percent -ge 70 ]]; then icon="󰢞 "
            elif [[ $percent -ge 60 ]]; then icon="󰂉 "
            elif [[ $percent -ge 50 ]]; then icon="󰢝 "
            elif [[ $percent -ge 40 ]]; then icon="󰂈 "
            elif [[ $percent -ge 30 ]]; then icon="󰂇 "
            elif [[ $percent -ge 20 ]]; then icon="󰂆 "
            elif [[ $percent -ge 10 ]]; then icon="󰢜 "
            elif [[ $percent -ge 0 ]]; then icon="󰢟 "
            fi
            ;;
        Discharging)
            if [[ $percent -ge 100 ]]; then icon="󰁹 "
            elif [[ $percent -ge 90 ]]; then icon="󰂂 "
            elif [[ $percent -ge 80 ]]; then icon="󰂁 "
            elif [[ $percent -ge 70 ]]; then icon="󰂀 "
            elif [[ $percent -ge 60 ]]; then icon="󰁿 "
            elif [[ $percent -ge 50 ]]; then icon="󰁾 "
            elif [[ $percent -ge 40 ]]; then icon="󰁽 "
            elif [[ $percent -ge 30 ]]; then icon="󰁼 "
            elif [[ $percent -ge 20 ]]; then icon="󰁻 "
            elif [[ $percent -ge 10 ]]; then icon="󰁺 "
            elif [[ $percent -ge 0 ]]; then icon="󰂎 "
            fi
            ;;
        Full)
            icon="󰂄 "
            ;;
        *)
            icon="󰂑 "
            ;;
    esac

    # Output
    echo "$icon $percent%"
}

function vvolume() {
    vol="$(pamixer --get-volume)"
    muted=$(pamixer --get-mute)
    if [[ "$vol" -eq 100 && "$muted" == "false" ]]; then
        echo " ${vol}%"  # Max volume
    elif [[ "$vol" -ge 50 && "$muted" == "false" ]]; then
        echo "󰕾 ${vol}%"  # High volume
    elif [[ "$vol" -ge 25 && "$muted" == "false" ]]; then
        echo "󰖀 ${vol}%"  # Medium volume
    elif [[ "$vol" -gt 0 && "$muted" == "false" ]]; then
        echo "󰕿 ${vol}%"  # Low volume
    else
        if [[ "$muted" == "true" ]]; then
            echo "󰝟  ${vol}%"  # Muted
        else
            echo "󰝟  Muted"  # 0
        fi
    fi
}

function bbrightness() {
    line="$(brightnessctl | grep "%")"
    brightness_raw=$(echo "$line" | grep -oP '\(\K[0-9]+%')
    brightness=${brightness_raw%\%}

    if [[ "$brightness" -eq 100 ]]; then
        echo "󰛨  ${brightness_raw}"
    elif [[ "$brightness" -ge 90 ]]; then
        echo "󱩖 ${brightness_raw}"
    elif [[ "$brightness" -ge 80 ]]; then
        echo "󱩖 ${brightness_raw}"
    elif [[ "$brightness" -ge 70 ]]; then
        echo "󱩕 ${brightness_raw}"
    elif [[ "$brightness" -ge 60 ]]; then
        echo "󱩔 ${brightness_raw}"
    elif [[ "$brightness" -ge 50 ]]; then
        echo "󱩓 ${brightness_raw}"
    elif [[ "$brightness" -ge 40 ]]; then
        echo "󱩒 ${brightness_raw}"
    elif [[ "$brightness" -ge 30 ]]; then
        echo "󱩑 ${brightness_raw}"
    elif [[ "$brightness" -ge 20 ]]; then
        echo "󱩐 ${brightness_raw}"
    elif [[ "$brightness" -ge 10 ]]; then
        echo "󱩏 ${brightness_raw}"
    elif [[ "$brightness" -ge 0 ]]; then
        echo "󱩎 ${brightness_raw}"
    else
        echo "󰹐 "
    fi
}



function all_stats() {
    echo "$(issrec) | $(disk_usage) | $(memory_usage) | $(cpu_load) | $(bbrightness) | $(vvolume) | $(bbattery) | $(wifi_status) | $(tail_status) | $(ddate) | $(ttime)"
}

function help_menu() {
    cat <<EOF
  Usage: $(basename "$0") [OPTION]

  Options:
    -h, --help  Show this help message
    cpu         Display CPU load
    mem         Display memory usage
    disk        Display disk usage
    wifi        Display WiFi connection status
    tail        Display tailscale connection status
    date        Display date
    time        Display time
    date_time   Display date and time
    isrec       Display recording status
    battery     Display battery status
    volume      Display volume
    brightness  Display brightness
    all         Display all stats
EOF
}

case "$opt" in
    cpu)
        cpu_load
        ;;
    mem)
        memory_usage
        ;;
    disk)
        disk_usage
        ;;
    wifi)
        wifi_status
        ;;
    tail)
        tail_status
        ;;
    date)
        ddate
        ;;
    time)
        ttime
        ;;
    date_time)
        date_time
        ;;
    isrec)
        issrec
        ;;
    battery)
        bbattery
        ;;
    volume)
        vvolume
        ;;
    brightness)
        bbrightness
        ;;
    all)
        all_stats
        ;;
    --help|-h)
        help_menu
        ;;
    *)
        echo "Error: Unknown argument '${opt:- }'."
        help_menu
        exit 1
        ;;
esac
