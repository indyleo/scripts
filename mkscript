#!/bin/env bash

set -euo pipefail

SCRIPTS_DIR="$HOME/Scripts"
mkdir -p "$SCRIPTS_DIR"

# Defaults
template="ask" # "basic" or "advanced"
open_in_editor=true
script_name=""

usage() {
    cat << 'EOF'
Usage: mkscript [OPTIONS] [NAME]

Create or open a script in ~/Scripts.

Options:
  -b, --basic       Create a basic script template
  -a, --advanced    Create a script with help/arg parsing
  -n, --noedit      Do not open in editor after creation
  -h, --help        Show this help message

Examples:
  mkscript mytool.sh            # Interactive mode
  mkscript -b cleanup.sh        # Basic template
  mkscript -a runner.sh         # Advanced template
  mkscript -a -n test.sh        # Advanced, skip opening editor
EOF
}

# --- Parse arguments ---
while [[ $# -gt 0 ]]; do
    case "$1" in
        -b|--basic)
            template="basic"
            ;;
        -a|--advanced)
            template="advanced"
            ;;
        -n|--noedit)
            open_in_editor=false
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "‚ùå Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            script_name="$1"
            ;;
    esac
    shift
done

# --- Get script name if missing ---
if [[ -z "$script_name" ]]; then
    read -rp "File Name: " script_name
    if [[ -z "$script_name" ]]; then
        echo "‚ùå Error: No filename provided."
        exit 1
    fi
fi

file_path="$SCRIPTS_DIR/$script_name"

# --- Create or open file ---
if [[ -e "$file_path" ]]; then
    echo "üìÇ Opening existing script: $file_path"
else
    echo "üÜï Creating new script: $file_path"

    # If no template flag, ask interactively
    if [[ "$template" == "ask" ]]; then
        echo
        echo "Select script type:"
        echo "  1) Basic script"
        echo "  2) Script with help menu and argument parsing"
        echo
        read -rp "Choice [1-2]: " choice
        if [[ "$choice" == "2" ]]; then
            template="advanced"
        else
            template="basic"
        fi
    fi

    # --- Generate template content ---
    basic_template='#!/bin/env bash

set -euo pipefail

# Your code here
'

    advanced_template='#!/bin/env bash

set -euo pipefail

opt="${1:-}"

help_menu() {
    cat << EOF

Usage: $(basename "$0") [OPTION]

Options:
  -h, --help        Show this help message

EOF
}

case "$opt" in
    -h|--help)
        help_menu
        ;;
    "")
        echo "‚öôÔ∏è  No option provided. Add logic here."
        ;;
    *)
        echo "‚ùå Error: ${opt} is not a valid option."
        help_menu
        exit 1
        ;;
esac
'

    # Write template
    if [[ "$template" == "advanced" ]]; then
        printf "%s" "$advanced_template" > "$file_path"
    else
        printf "%s" "$basic_template" > "$file_path"
    fi

    chmod +x "$file_path"
    echo "‚úÖ Created: $file_path"
fi

# --- Open in editor ---
if $open_in_editor; then
    "${EDITOR:-nvim}" "$file_path"
else
    echo "üìù Skipped opening in editor."
fi

