#!/bin/env bash

set -euo pipefail

SCRIPTS_DIR="$HOME/Scripts"
mkdir -p "$SCRIPTS_DIR"

# Get script name from argument or prompt
script_name="${1:-}"
if [[ -z "$script_name" ]]; then
    read -rp "File Name: " script_name
    [[ -z "$script_name" ]] && {
        echo "‚ùå Error: No filename provided."
        exit 1
    }
fi

file_path="$SCRIPTS_DIR/$script_name"

# Check if file exists
if [[ -e "$file_path" ]]; then
    echo "üìÇ Opening existing script: $file_path"
else
    echo "üÜï Creating new script: $file_path"

    # Choose script type
    echo
    echo "Select script type:"
    echo "  1) Basic script"
    echo "  2) Script with help menu and argument parsing"
    echo
    read -rp "Choice [1-2]: " choice

    case "$choice" in
      2)
        cat << 'EOF' > "$file_path"
#!/bin/env bash

set -euo pipefail

opt="${1:-}"

function help_menu() {
    cat << EOF

Usage: $(basename "$0") [OPTION]

Options:
  -h, --help        Show this help message

EOF
}

case "$opt" in
    -h|--help)
        help_menu
        ;;
    "")
        echo "‚öôÔ∏è  No option provided. Add logic here."
        ;;
    *)
        echo "‚ùå Error: '${opt}' is not a valid option."
        help_menu
        exit 1
        ;;
esac
EOF
        ;;
      *)
        cat << 'EOF' > "$file_path"
#!/bin/env bash

set -euo pipefail

# Your code here
EOF
        ;;
    esac

    # Cleanup and permissions
    sed -i 's/\\//g' "$file_path"
    chmod +x "$file_path"
    echo "‚úÖ Created: $file_path"
fi

# Open in editor
${EDITOR:-vim} "$file_path"

