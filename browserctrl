#!/bin/env bash

set -euo pipefail

# Preferred players in order
players=("chromium" "firefox" "brave")

# Get the list of active playerctl names
active_players=$(playerctl -l 2>/dev/null)

opt="${1:-}"
cutpoint="${2:-25}"
cmd="pkill -RTMIN+17 slstatus"

function sel_player() {
    for preferred in "${players[@]}"; do
        match=$(echo "$active_players" | grep -i "^$preferred")
        if [[ -n $match ]]; then
            echo "$match"
            exit 0
        fi
    done
}

match=$(sel_player)
if [[ -z $match ]]; then
    echo "No player found"
    exit 1
fi

browsers=("qutebrowser" "firefox" "brave" "chromium")
function get_running_browser() {
    for browser in "${browsers[@]}"; do
        if pgrep -x "$browser" > /dev/null; then
            echo "$browser"
            return 0
        fi
    done
    exit 1  # none found
}
active_browser=$(get_running_browser)
if [[ -z $active_browser ]]; then
    echo "No browser found"
    exit 1
fi

function browser_togglepause() {
    playerctl play-pause --player="$match"
    eval "$cmd"
}

function browser_skip() {
    playerctl next --player="$match"
    eval "$cmd"
}

function browser_previous() {
    playerctl previous --player="$match"
    eval "$cmd"
}

function browser_title() {
    status=$(playerctl status --player="$match" 2>/dev/null)

    if [ "$status" = "Playing" ]; then
        title=$(playerctl metadata title --player="$match" 2>/dev/null)

        if [[ -n "$cutpoint" ]]; then
            if (( ${#title} > cutpoint )); then
                # Cut at nearest space before cutpoint
                truncated=$(echo "$title" | cut -c 1-"$cutpoint")
                clean_cut=$(echo "$truncated" | awk '{ for (i=1;i<=NF;i++) { if (length(s $i) + 1 <= '$cutpoint') s = s $i " "; else break } print s }' | sed 's/ *$//')
                echo "$clean_cut ..."
            else
                echo "$title"
            fi
        else
            echo "$title"
        fi
    else
        echo "Not Playing/Paused"
    fi
    eval "$cmd"
}

function browser_state() {
    match=$(sel_player)

    # Icon mapping
    case "$active_browser" in
        qutebrowser) icon=" " ;;  # Web icon or generic globe
        firefox)     icon=" " ;;
        brave)       icon=" " ;;
        chromium)    icon=" " ;;
        *)           icon="󰖟 " ;;  # Fallback
    esac

    if [[ -z $match ]]; then
        echo "$icon  "  # Browser running, but no media session
        return
    fi

    # Query media playback state
    status=$(playerctl status --player="$match" 2>/dev/null)
    case "$status" in
        Playing)
            echo "$icon "
            ;;
        Paused)
            echo "$icon "
            ;;
        Stopped)
            echo "$icon "
            ;;
        *)
            echo "$icon "
            ;;
    esac
}

function help_menu() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

Options:
    --help, -h                 Show this help message
    --togglepause, -tp         Toggle pause media
    --skip, -s                 Skip browser media
    --previous, -p             Previous browser media
    --browsertitle, -bt        Show browser title
    --browserstate, -bs        Show browser state
EOF

}

case "$opt" in
    --togglepause|-tp)
        browser_togglepause ;;
    --skip|-s)
        browser_skip ;;
    --previous|-p)
        browser_previous ;;
    --browsertitle|-bt)
        browser_title ;;
    --songstate|-bs)
        browser_state ;;
    --help|-h)
        help_menu ;;
    *)
        echo "Error: '${opt:- }' Invalid option."
        help_menu
        exit 1 ;;
esac
