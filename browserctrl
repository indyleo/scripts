#!/bin/env bash

set -euo pipefail

# Check if playerctl is installed
if ! command -v playerctl &> /dev/null; then
    echo "Error: playerctl is not installed."
    exit 1
fi

# Source utils
[[ -f "${XDG_SCRIPTS_HOME:-$HOME/.local/scripts}/utils" ]] && \
    source "${XDG_SCRIPTS_HOME:-$HOME/.local/scripts}/utils"

# Preferred players in order
players=("chromium" "firefox" "brave")

# Get the list of active playerctl names
active_players=$(playerctl -l 2>/dev/null || true)

opt="${1:-}"
cutpoint="${2:-25}"

# Select the most preferred available player
function sel_player() {
    for preferred in "${players[@]}"; do
        match=$(echo "$active_players" | grep -i "^$preferred" | head -n 1)
        if [[ -n "$match" ]]; then
            echo "$match"
            return 0
        fi
    done
    return 1
}

# Cache the selected player
match=$(sel_player || true)
if [[ -z "${match:-}" ]]; then
    echo "No player found"
    exit 1
fi

# Get the first running browser from the preferred list
browsers=("qutebrowser" "firefox" "brave" "chromium")
function get_running_browser() {
    for browser in "${browsers[@]}"; do
        if pgrep -x "$browser" > /dev/null; then
            echo "$browser"
            return 0
        fi
    done
    return 1
}
active_browser=$(get_running_browser || true)
if [[ -z "${active_browser:-}" ]]; then
    echo "No browser found"
    exit 1
fi

function browser_togglepause() {
    playerctl play-pause --player="$match"
}

function browser_skip() {
    playerctl next --player="$match"
}

function browser_previous() {
    playerctl previous --player="$match"
}

function browser_title() {
    status=$(playerctl status --player="$match" 2>/dev/null || true)

    if [[ "$status" == "Playing" ]]; then
        title=$(playerctl metadata title --player="$match" 2>/dev/null || true)

        if [[ -n "$cutpoint" && ${#title} -gt "$cutpoint" ]]; then
            truncated=$(echo "$title" | cut -c 1-"$cutpoint")
            clean_cut=$(echo "$truncated" | awk -v cp="$cutpoint" '{ for (i=1;i<=NF;i++) { if (length(s $i) + 1 <= cp) s = s $i " "; else break } print s }' | sed 's/ *$//')
            echo "$clean_cut ..."
        else
            echo "$title"
        fi
    else
        echo "Not Playing/Paused"
    fi
}

function browser_state() {
    case "$active_browser" in
        qutebrowser) icon=" " ;;
        firefox)     icon=" " ;;
        brave)       icon=" " ;;
        chromium)    icon=" " ;;
        *)           icon="󰖟 " ;;
    esac

    if [[ -z "$match" ]]; then
        echo "$icon  "
        return
    fi

    status=$(playerctl status --player="$match" 2>/dev/null || true)
    case "$status" in
        Playing) echo "$icon " ;;
        Paused)  echo "$icon " ;;
        Stopped) echo "$icon " ;;
        *)       echo "$icon " ;;
    esac
}

function browser_state_title() {
    local state title
    state=$(browser_state)
    title=$(browser_title)
    echo "$state $title"
}

function help_menu() {
    cat <<EOF
Usage: $(basename "$0") [OPTION]

Options:
    --help, -h                 Show this help message
    --togglepause, -tp         Toggle pause media
    --skip, -s                 Skip browser media
    --previous, -p             Previous browser media
    --browsertitle, -bt        Show browser title
    --browserstate, -bs        Show browser state
    --browserstatetitle, -bst  Show browser state and title
EOF
}

# Command dispatch
case "$opt" in
    --togglepause|-tp)
        browser_togglepause ;;
    --skip|-s)
        browser_skip ;;
    --previous|-p)
        browser_previous ;;
    --browsertitle|-bt)
        browser_title ;;
    --browserstate|-bs)
        browser_state ;;
    --browserstatetitle|-bst)
        browser_state_title ;;
    --help|-h)
        help_menu ;;
    *)
        echo "Error: '${opt:- }' is an invalid option."
        help_menu
        exit 1 ;;
esac
