#!/usr/bin/env bash
# ==============================================================================
#  Neovim Version Manager (2025)
# ==============================================================================

set -euo pipefail

# === CONFIG ===
REPO="neovim/neovim"
INSTALL_DIR="${HOME}/.local/nvim"
BIN_DIR="${HOME}/.local/bin"
LINK_PATH="${BIN_DIR}/nvim"
KEEP_VERSIONS=2
DRY_RUN=false

# === COLORS ===
if [[ -t 1 ]]; then
    GREEN="\e[32m"; YELLOW="\e[33m"; RED="\e[31m"; BOLD="\e[1m"; RESET="\e[0m"
else
    GREEN=""; YELLOW=""; RED=""; BOLD=""; RESET=""
fi

# === UTILS ===
function msg() { echo -e "${1}${2}${RESET}"; }
function die() { msg "$RED" "‚ùå $1"; exit 1; }

# === DEPENDENCY CHECK ===
function check_deps() {
    local deps=(curl jq tar mktemp chmod sort basename readlink uname sha256sum)
    for d in "${deps[@]}"; do
        command -v "$d" >/dev/null 2>&1 || die "$d is required but not found."
    done
}

# === OS + ARCH DETECTION ===
function get_os_arch() {
    local os arch
    os=$(uname -s | tr '[:upper:]' '[:lower:]')
    arch=$(uname -m)
    case "$arch" in
        x86_64) arch="x86_64" ;;
        arm64|aarch64) arch="arm64" ;;
        armv7l) arch="armv7" ;;
        *) die "Unsupported architecture: $arch" ;;
    esac
    echo "$os:$arch"
}

# === FETCH RELEASE TAG ===
function fetch_tag() {
    local channel="${1:-stable}" api_url="https://api.github.com/repos/${REPO}/releases"
    if [[ "$channel" == "nightly" ]]; then
        curl -fsSL "$api_url" | jq -r '[.[] | select(.prerelease==true) | .tag_name][0]'
    else
        curl -fsSL "$api_url" | jq -r '[.[] | select(.prerelease==false) | .tag_name][0]'
    fi
}

# === CONSTRUCT DOWNLOAD URL ===
function construct_download_url() {
    local tag="$1" os="$2" arch="$3"
    case "$os" in
        linux)
            echo "https://github.com/${REPO}/releases/download/${tag}/nvim-linux-${arch}.AppImage"
            ;;
        darwin)
            echo "https://github.com/${REPO}/releases/download/${tag}/nvim-macos.tar.gz"
            ;;
        *)
            die "Unsupported OS: $os"
            ;;
    esac
}

# === INSTALL FUNCTION ===
function install_nvim() {
    check_deps
    mkdir -p "$INSTALL_DIR" "$BIN_DIR"

    local channel="${1:-stable}" specific="${2:-}" os_arch os arch tag url tmp nvim_path

    IFS=":" read -r os arch <<<"$(get_os_arch)"

    if [[ -n "$specific" ]]; then
        tag="$specific"
    elif [[ "$channel" == "nightly" ]]; then
        tag=$(fetch_tag nightly)
    else
        tag=$(fetch_tag stable)
    fi

    [[ -z "$tag" || "$tag" == "null" ]] && die "Could not fetch tag for $channel"

    url=$(construct_download_url "$tag" "$os" "$arch")
    [[ -z "$url" ]] && die "Failed to construct download URL."

    msg "$YELLOW" "‚¨áÔ∏è  Downloading Neovim ${tag} ..."
    tmp=$(mktemp)
    if [[ "$DRY_RUN" == true ]]; then
        msg "$YELLOW" "[DRY RUN] Would download: $url"
        return
    fi
    curl -fL --retry 3 --progress-bar -o "$tmp" "$url" || die "Download failed."

    # === Install depending on OS ===
    if [[ "$os" == "darwin" ]]; then
        local dir="${INSTALL_DIR}/${tag}"
        mkdir -p "$dir"
        tar -xzf "$tmp" -C "$dir" --strip-components=1
        nvim_path="${dir}/bin/nvim"
    else
        nvim_path="${INSTALL_DIR}/${tag}.AppImage"
        chmod +x "$tmp"
        mv "$tmp" "$nvim_path"
    fi

    msg "$GREEN" "‚úÖ Installed ${tag} successfully."

    # === Automatically link to ~/.local/bin/nvim ===
    ln -sfn "$nvim_path" "$LINK_PATH"
    msg "$GREEN" "üîó Linked ${tag} ‚Üí ${LINK_PATH}"

    autoclean "$channel"
}

# === USE FUNCTION ===
function use_nvim() {
    local req="${1:-}"
    [[ -z "$req" ]] && { msg "$YELLOW" "Usage: $0 use <version|stable|nightly>"; return; }

    local tag target
    if [[ "$req" == "nightly" || "$req" == "stable" ]]; then
        tag=$(fetch_tag "$req")
    else
        tag="$req"
    fi

    target=$(find "$INSTALL_DIR" -type f -name "${tag}*" -o -type d -name "${tag}" | head -n1)
    [[ -z "$target" ]] && die "Version $tag not installed. Run '$0 install $tag' first."

    mkdir -p "$BIN_DIR"
    local nvim_bin="$target"
    [[ -d "$target" ]] && nvim_bin="${target}/bin/nvim"

    ln -sfn "$nvim_bin" "$LINK_PATH"
    msg "$GREEN" "‚úÖ Using ${tag}"
    "$LINK_PATH" --version | head -n2
}

# === UNINSTALL FUNCTION ===
function uninstall_nvim() {
    local tag="${1:-}"
    [[ -z "$tag" ]] && {
        msg "$YELLOW" "Installed versions:"
        ls "$INSTALL_DIR" 2>/dev/null || msg "$YELLOW" "None found."
        msg "$YELLOW" "\nUsage: $0 uninstall <version|--all>"
        return
    }

    if [[ "$tag" == "--all" ]]; then
        read -rp "‚ö†Ô∏è  Remove ALL installed Neovim versions (y/N)? " confirm
        [[ "$confirm" =~ ^[Yy]$ ]] || { msg "$YELLOW" "Aborted."; return; }
        rm -rf "$INSTALL_DIR"/*
        rm -f "$LINK_PATH"
        msg "$GREEN" "‚úÖ All versions removed."
        return
    fi

    local target
    target=$(find "$INSTALL_DIR" -maxdepth 1 -name "${tag}*" | head -n1)
    [[ -z "$target" ]] && die "Version '${tag}' not found in $INSTALL_DIR."

    rm -rf "$target"
    if [[ -L "$LINK_PATH" && "$(readlink "$LINK_PATH")" == "$target" ]]; then
        rm -f "$LINK_PATH"
    fi
    msg "$GREEN" "‚úÖ Uninstalled ${tag}."
}

# === AUTO-CLEAN FUNCTION ===
function autoclean() {
    local channel="$1"
    local files=($(ls -1t "$INSTALL_DIR"))
    (( ${#files[@]} <= KEEP_VERSIONS )) && return
    msg "$YELLOW" "üßπ Cleaning old versions (keeping $KEEP_VERSIONS)..."
    for v in "${files[@]:KEEP_VERSIONS}"; do
        rm -rf "${INSTALL_DIR:?}/${v}"
        msg "$RED" "üóëÔ∏è  Removed old version: $v"
    done
}

# === CHECK CURRENT ===
function check_nvim() {
    if [[ -L "$LINK_PATH" ]]; then
        msg "$GREEN" "üîç Current Neovim:"
        readlink "$LINK_PATH"
        "$LINK_PATH" --version | head -n3
    else
        msg "$YELLOW" "‚ö†Ô∏è  No active Neovim version."
    fi
}

# === LIST VERSIONS ===
function list_versions() {
    msg "$BOLD" "Installed:"
    ls "$INSTALL_DIR" 2>/dev/null || msg "$YELLOW" "None installed."

    msg "$BOLD" "\nAvailable (GitHub):"
    echo "Stable:  $(fetch_tag stable)"
    echo "Nightly: $(fetch_tag nightly)"
}

# === HELP MENU ===
function help_menu() {
    cat <<EOF
Usage: $(basename "$0") [command] [args]

Commands:
  install [stable|nightly|version]  Install and verify a version
  use <version|stable|nightly>      Activate an installed version
  uninstall <version|--all>         Remove one or all versions
  check                             Show the active Neovim version
  list                              List installed and available versions
  help                              Show this help message
EOF
}

# === MAIN ===
function main() {
    local cmd="${1:-}"; shift || true
    case "$cmd" in
        install) install_nvim "${1:-stable}" "${2:-}" ;;
        use) use_nvim "${1:-}" ;;
        uninstall) uninstall_nvim "${1:-}" ;;
        check) check_nvim ;;
        list) list_versions ;;
        help|"") help_menu ;;
        *) die "Unknown command: $cmd" ;;
    esac
}
main "$@"
